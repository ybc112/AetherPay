const { ethers } = require('hardhat');

// ÂêàÁ∫¶Âú∞ÂùÄ
const PAYMENT_GATEWAY_V2 = '0x4995168D409767330D9693034d5cFfc7daFFb89B';
const PAYMENT_GATEWAY_V1 = '0xe624C84633FA9C3D250222b202059d03830C52cf';
const MOCK_USDC = '0x07C1E2588295b73bD0b98F2806AbF13E748b6cC3';

// ABI
const GATEWAY_ABI = [
  {
    "inputs": [{"internalType": "string", "name": "orderIdString", "type": "string"}],
    "name": "getOrderDetailsByString",
    "outputs": [
      {"internalType": "bytes32", "name": "orderId", "type": "bytes32"},
      {"internalType": "address", "name": "merchant", "type": "address"},
      {"internalType": "address", "name": "payer", "type": "address"},
      {"internalType": "uint256", "name": "orderAmount", "type": "uint256"},
      {"internalType": "address", "name": "paymentToken", "type": "address"},
      {"internalType": "address", "name": "settlementToken", "type": "address"},
      {"internalType": "uint256", "name": "paidAmount", "type": "uint256"},
      {"internalType": "uint256", "name": "receivedAmount", "type": "uint256"},
      {"internalType": "uint8", "name": "status", "type": "uint8"},
      {"internalType": "uint256", "name": "createdAt", "type": "uint256"},
      {"internalType": "uint256", "name": "expiryTime", "type": "uint256"},
      {"internalType": "string", "name": "metadataURI", "type": "string"}
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "merchant", "type": "address"}],
    "name": "getMerchantInfo",
    "outputs": [
      {"internalType": "string", "name": "businessName", "type": "string"},
      {"internalType": "uint256", "name": "totalOrders", "type": "uint256"},
      {"internalType": "uint256", "name": "totalVolume", "type": "uint256"},
      {"internalType": "uint256", "name": "pendingBalance", "type": "uint256"},
      {"internalType": "uint256", "name": "feeRate", "type": "uint256"},
      {"internalType": "bool", "name": "isActive", "type": "bool"}
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

const ERC20_ABI = [
  {
    "inputs": [
      {"internalType": "address", "name": "owner", "type": "address"},
      {"internalType": "address", "name": "spender", "type": "address"}
    ],
    "name": "allowance",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "account", "type": "address"}],
    "name": "balanceOf",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  }
];

async function main() {
  const orderIdString = process.argv[2];
  const buyerAddress = process.argv[3];

  if (!orderIdString || !buyerAddress) {
    console.log('Usage: node scripts/diagnose-order.js <orderIdString> <buyerAddress>');
    console.log('Example: node scripts/diagnose-order.js AP65ELTMI 0x...');
    process.exit(1);
  }

  console.log('\nüîç ËØäÊñ≠ËÆ¢ÂçïÁä∂ÊÄÅ\n');
  console.log('ËÆ¢ÂçïID:', orderIdString);
  console.log('‰π∞ÂÆ∂Âú∞ÂùÄ:', buyerAddress);
  console.log('');

  const gatewayV2 = await ethers.getContractAt(GATEWAY_ABI, PAYMENT_GATEWAY_V2);
  const gatewayV1 = await ethers.getContractAt(GATEWAY_ABI, PAYMENT_GATEWAY_V1);
  const usdc = await ethers.getContractAt(ERC20_ABI, MOCK_USDC);

  try {
    // 1. ËØªÂèñËÆ¢Âçï‰ø°ÊÅØ
    console.log('üì¶ 1. ËÆ¢Âçï‰ø°ÊÅØ (V2ÁΩëÂÖ≥)\n');
    const order = await gatewayV2.getOrderDetailsByString(orderIdString);
    console.log('  ËÆ¢ÂçïID (bytes32):', order.orderId);
    console.log('  ÂïÜÂÆ∂Âú∞ÂùÄ:', order.merchant);
    console.log('  ‰π∞ÂÆ∂Âú∞ÂùÄ:', order.payer);
    console.log('  ËÆ¢ÂçïÈáëÈ¢ù:', ethers.formatUnits(order.orderAmount, 6), 'USDC');
    console.log('  ÊîØ‰ªò‰ª£Â∏Å:', order.paymentToken);
    console.log('  ÁªìÁÆó‰ª£Â∏Å:', order.settlementToken);
    console.log('  Áä∂ÊÄÅ:', ['Pending', 'Paid', 'Processing', 'Completed', 'Cancelled', 'Expired'][order.status]);
    console.log('');

    // 2. Ê£ÄÊü•ÂïÜÂÆ∂Âú®V2ÁöÑÊ≥®ÂÜåÁä∂ÊÄÅ
    console.log('üë§ 2. ÂïÜÂÆ∂Ê≥®ÂÜåÁä∂ÊÄÅ\n');
    const merchantInfoV2 = await gatewayV2.getMerchantInfo(order.merchant);
    console.log('  Âú® V2 ÁΩëÂÖ≥:');
    console.log('    ÂïÜÂÆ∂ÂêçÁß∞:', merchantInfoV2.businessName || '(Êú™Ê≥®ÂÜå)');
    console.log('    ÊòØÂê¶ÊøÄÊ¥ª:', merchantInfoV2.isActive);
    console.log('    ÊÄªËÆ¢ÂçïÊï∞:', merchantInfoV2.totalOrders.toString());
    console.log('');

    // 3. Ê£ÄÊü•ÂïÜÂÆ∂Âú®V1ÁöÑÊ≥®ÂÜåÁä∂ÊÄÅ
    const merchantInfoV1 = await gatewayV1.getMerchantInfo(order.merchant);
    console.log('  Âú® V1 ÁΩëÂÖ≥ (ÊóßÁâà):');
    console.log('    ÂïÜÂÆ∂ÂêçÁß∞:', merchantInfoV1.businessName || '(Êú™Ê≥®ÂÜå)');
    console.log('    ÊòØÂê¶ÊøÄÊ¥ª:', merchantInfoV1.isActive);
    console.log('    ÊÄªËÆ¢ÂçïÊï∞:', merchantInfoV1.totalOrders.toString());
    console.log('');

    // 4. Ê£ÄÊü•‰π∞ÂÆ∂‰ΩôÈ¢ùÂíåÊéàÊùÉ
    console.log('üí∞ 3. ‰π∞ÂÆ∂Ë¥¶Êà∑Áä∂ÊÄÅ\n');
    const balance = await usdc.balanceOf(buyerAddress);
    const allowanceV2 = await usdc.allowance(buyerAddress, PAYMENT_GATEWAY_V2);
    const allowanceV1 = await usdc.allowance(buyerAddress, PAYMENT_GATEWAY_V1);

    console.log('  USDC ‰ΩôÈ¢ù:', ethers.formatUnits(balance, 6), 'USDC');
    console.log('  ÊéàÊùÉÁªô V2 ÁΩëÂÖ≥:', ethers.formatUnits(allowanceV2, 6), 'USDC');
    console.log('  ÊéàÊùÉÁªô V1 ÁΩëÂÖ≥:', ethers.formatUnits(allowanceV1, 6), 'USDC');
    console.log('');

    // 5. ËØäÊñ≠ÁªìÊûú
    console.log('üéØ 4. ËØäÊñ≠ÁªìÊûú\n');

    const hasBalance = balance >= order.orderAmount;
    const hasAllowanceV2 = allowanceV2 >= order.orderAmount;
    const merchantRegisteredV2 = merchantInfoV2.isActive;
    const merchantRegisteredV1 = merchantInfoV1.isActive;

    console.log(`  [${ hasBalance ? '‚úÖ' : '‚ùå' }] ‰π∞ÂÆ∂‰ΩôÈ¢ùÂÖÖË∂≥: ${hasBalance ? 'ÊòØ' : 'Âê¶'}`);
    console.log(`  [${ hasAllowanceV2 ? '‚úÖ' : '‚ùå' }] V2ÊéàÊùÉÂÖÖË∂≥: ${hasAllowanceV2 ? 'ÊòØ' : 'Âê¶'}`);
    console.log(`  [${ merchantRegisteredV2 ? '‚úÖ' : '‚ùå' }] ÂïÜÂÆ∂Âú®V2Ê≥®ÂÜå: ${merchantRegisteredV2 ? 'ÊòØ' : 'Âê¶'}`);
    console.log(`  [${ !merchantRegisteredV1 ? '‚úÖ' : '‚ö†Ô∏è' }] ÂïÜÂÆ∂Êú™Âú®V1Ê≥®ÂÜå: ${!merchantRegisteredV1 ? 'ÊòØ' : 'Âê¶ (ËøôÂèØËÉΩÂØºËá¥Ê∑∑Ê∑Ü)'}`);
    console.log('');

    // 6. ÈóÆÈ¢òÂàÜÊûê
    if (!merchantRegisteredV2) {
      console.log('‚ùå ÂÖ≥ÈîÆÈóÆÈ¢ò: ÂïÜÂÆ∂Êú™Âú®V2ÁΩëÂÖ≥Ê≥®ÂÜå!');
      console.log('');
      console.log('   Ëß£ÂÜ≥ÊñπÊ°à:');
      console.log('   1. ÂïÜÂÆ∂ÈúÄË¶ÅËÆøÈóÆ Dashboard ÈáçÊñ∞Ê≥®ÂÜå');
      console.log('   2. Á°Æ‰øù‰ΩøÁî®ÁöÑÊòØÂïÜÂÆ∂Èí±ÂåÖÂú∞ÂùÄ:', order.merchant);
      console.log('   3. Âú® http://localhost:3000/dashboard ÁÇπÂáª "Register Merchant Account"');
      console.log('');
    } else if (!hasAllowanceV2) {
      console.log('‚ùå ÂÖ≥ÈîÆÈóÆÈ¢ò: ‰π∞ÂÆ∂Êú™ÊéàÊùÉV2ÁΩëÂÖ≥!');
      console.log('');
      console.log('   Ëß£ÂÜ≥ÊñπÊ°à:');
      console.log('   1. ‰π∞ÂÆ∂ÈúÄË¶ÅËÆøÈóÆÊîØ‰ªòÈ°µÈù¢');
      console.log('   2. ÁÇπÂáª "Approve USDC" ÊåâÈíÆ');
      console.log('   3. Á°ÆËÆ§MetaMask‰∫§ÊòìÂπ∂Á≠âÂæÖÁ°ÆËÆ§');
      console.log('');
    } else if (!hasBalance) {
      console.log('‚ùå ÂÖ≥ÈîÆÈóÆÈ¢ò: ‰π∞ÂÆ∂‰ΩôÈ¢ù‰∏çË∂≥!');
      console.log('');
      console.log('   Ëß£ÂÜ≥ÊñπÊ°à:');
      console.log('   1. ËøêË°åÈì∏Â∏ÅËÑöÊú¨: npx hardhat run scripts/mint-tokens.js --network op-sepolia');
      console.log('');
    } else {
      console.log('‚úÖ ÊâÄÊúâÊ£ÄÊü•ÈÄöËøá! ÁêÜËÆ∫‰∏äÂ∫îËØ•ÂèØ‰ª•ÊîØ‰ªò„ÄÇ');
      console.log('');
      console.log('   Â¶ÇÊûú‰ªçÁÑ∂Â§±Ë¥•,ÂèØËÉΩÁöÑÂéüÂõ†:');
      console.log('   1. ÂâçÁ´ØÁºìÂ≠òÈóÆÈ¢ò - Â∞ùËØïÁ°¨Âà∑Êñ∞ (Ctrl+Shift+R)');
      console.log('   2. MetaMaskÁºìÂ≠ò - Â∞ùËØïÈáçÊñ∞ËøûÊé•Èí±ÂåÖ');
      console.log('   3. RPCÂª∂Ëøü - Á≠âÂæÖÂá†ÁßíÂêéÈáçËØï');
      console.log('');
    }

  } catch (error) {
    console.error('‚ùå ËØäÊñ≠Â§±Ë¥•:', error.message);
    if (error.message.includes('Order not found')) {
      console.log('');
      console.log('ËÆ¢Âçï‰∏çÂ≠òÂú®! ÂèØËÉΩÁöÑÂéüÂõ†:');
      console.log('1. ËÆ¢ÂçïIDÈîôËØØ');
      console.log('2. ËÆ¢ÂçïÊú™Âú®V2ÁΩëÂÖ≥ÂàõÂª∫');
      console.log('3. ËÆ¢ÂçïÂèØËÉΩÂú®V1ÁΩëÂÖ≥ (Â∑≤ÂºÉÁî®)');
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
