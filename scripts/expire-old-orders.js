const { ethers } = require("hardhat");

/**
 * ü§ñ KeeperËÑöÊú¨ÔºöËá™Âä®Ê†áËÆ∞ËøáÊúüËÆ¢Âçï
 *
 * ÂäüËÉΩÔºö
 * 1. Êâ´ÊèèÊâÄÊúâÂïÜÂÆ∂ÁöÑPENDINGËÆ¢Âçï
 * 2. Ê£ÄÊü•ÂàõÂª∫Êó∂Èó¥Ë∂ÖËøá24Â∞èÊó∂ÁöÑËÆ¢Âçï
 * 3. Ëá™Âä®Ê†áËÆ∞‰∏∫CANCELLEDÔºà‰Ωú‰∏∫EXPIREDÂ§ÑÁêÜÔºâ
 *
 * ËøêË°åÊñπÂºèÔºö
 * - ÊâãÂä®ËøêË°åÔºönpx hardhat run scripts/expire-old-orders.js --network optimism-sepolia
 * - ÂÆöÊó∂‰ªªÂä°Ôºö‰ΩøÁî®cronÊØèÂ∞èÊó∂ËøêË°å‰∏ÄÊ¨°
 */

const PAYMENT_GATEWAY_ADDRESS = "0x26Fea37ec7D0Fe6858C9209044F715b549bAD343"; // ÂΩìÂâç‰ΩøÁî®ÁöÑÊóßÂêàÁ∫¶
const EXPIRY_HOURS = 24; // 24Â∞èÊó∂ËøáÊúü

async function main() {
  console.log("\nü§ñ Starting Expired Orders Keeper...\n");

  const [keeper] = await ethers.getSigners();
  console.log("Keeper address:", keeper.address);

  const PaymentGatewayV2 = await ethers.getContractFactory("PaymentGatewayV2");
  const gateway = PaymentGatewayV2.attach(PAYMENT_GATEWAY_ADDRESS);

  // Ëé∑ÂèñÊâÄÊúâÊ≥®ÂÜåÂïÜÂÆ∂ÔºàËøôÈáåÈúÄË¶ÅÈÅçÂéÜ‰∫ã‰ª∂ÊàñÁª¥Êä§ÂïÜÂÆ∂ÂàóË°®Ôºâ
  // ÁÆÄÂåñÁâàÔºöÊàë‰ª¨‰ªéOrderCreated‰∫ã‰ª∂‰∏≠ÊèêÂèñÂïÜÂÆ∂Âú∞ÂùÄ
  const filter = gateway.filters.OrderCreated();
  const events = await gateway.queryFilter(filter, -10000); // ÊúÄËøë10000‰∏™Âå∫Âùó

  // ÊèêÂèñÂîØ‰∏ÄÂïÜÂÆ∂Âú∞ÂùÄ
  const merchantsSet = new Set();
  events.forEach(event => {
    merchantsSet.add(event.args.merchant);
  });

  const merchants = Array.from(merchantsSet);
  console.log(`Found ${merchants.length} unique merchants\n`);

  let totalExpired = 0;

  // ÈÅçÂéÜÊØè‰∏™ÂïÜÂÆ∂ÁöÑPENDINGËÆ¢Âçï
  for (const merchant of merchants) {
    console.log(`Checking merchant: ${merchant}`);

    try {
      // Ëé∑ÂèñPENDINGÁä∂ÊÄÅÁöÑËÆ¢Âçï
      const pendingOrderIds = await gateway.getMerchantOrdersByStatus(merchant, 0); // 0 = PENDING

      if (pendingOrderIds.length === 0) {
        console.log("  No pending orders\n");
        continue;
      }

      console.log(`  Found ${pendingOrderIds.length} pending orders`);

      // Ê£ÄÊü•ÊØè‰∏™ËÆ¢ÂçïÊòØÂê¶ËøáÊúü
      for (const orderId of pendingOrderIds) {
        const order = await gateway.getOrder(orderId);
        const createdAt = order.createdAt.toNumber();
        const now = Math.floor(Date.now() / 1000);
        const ageHours = (now - createdAt) / 3600;

        if (ageHours > EXPIRY_HOURS) {
          console.log(`  ‚åõ Order ${orderId.slice(0, 10)}... is expired (${ageHours.toFixed(1)}h old)`);

          try {
            // Â∞ùËØïÂèñÊ∂àËÆ¢ÂçïÔºàÈúÄË¶ÅownerÊùÉÈôêÊàñÂïÜÂÆ∂ÊùÉÈôêÔºâ
            const tx = await gateway.cancelOrder(orderId);
            await tx.wait();

            console.log(`  ‚úÖ Marked as cancelled: ${tx.hash}\n`);
            totalExpired++;
          } catch (error) {
            console.log(`  ‚ùå Failed to cancel: ${error.message}\n`);
          }
        }
      }
    } catch (error) {
      console.log(`  ‚ùå Error checking merchant: ${error.message}\n`);
    }
  }

  console.log("\n" + "=".repeat(50));
  console.log(`‚úÖ Keeper finished: ${totalExpired} orders marked as expired`);
  console.log("=".repeat(50) + "\n");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå Keeper error:", error);
    process.exit(1);
  });
