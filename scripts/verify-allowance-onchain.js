const { ethers } = require('hardhat');

// ÂêàÁ∫¶Âú∞ÂùÄ
const PAYMENT_GATEWAY_V2 = '0x4995168D409767330D9693034d5cFfc7daFFb89B';
const MOCK_USDC = '0x07C1E2588295b73bD0b98F2806AbF13E748b6cC3';

// ERC20 ABI
const ERC20_ABI = [
  {
    "inputs": [
      {"internalType": "address", "name": "owner", "type": "address"},
      {"internalType": "address", "name": "spender", "type": "address"}
    ],
    "name": "allowance",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "account", "type": "address"}],
    "name": "balanceOf",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  }
];

// PaymentGateway ABI
const GATEWAY_ABI = [
  {
    "inputs": [{"internalType": "string", "name": "orderIdString", "type": "string"}],
    "name": "getOrderDetailsByString",
    "outputs": [
      {"internalType": "bytes32", "name": "orderId", "type": "bytes32"},
      {"internalType": "address", "name": "merchant", "type": "address"},
      {"internalType": "address", "name": "payer", "type": "address"},
      {"internalType": "uint256", "name": "orderAmount", "type": "uint256"},
      {"internalType": "address", "name": "paymentToken", "type": "address"},
      {"internalType": "address", "name": "settlementToken", "type": "address"},
      {"internalType": "uint256", "name": "paidAmount", "type": "uint256"},
      {"internalType": "uint256", "name": "receivedAmount", "type": "uint256"},
      {"internalType": "uint8", "name": "status", "type": "uint8"},
      {"internalType": "uint256", "name": "createdAt", "type": "uint256"},
      {"internalType": "uint256", "name": "expiryTime", "type": "uint256"},
      {"internalType": "string", "name": "metadataURI", "type": "string"}
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

async function main() {
  const orderIdString = process.argv[2];
  const buyerAddress = process.argv[3];

  if (!orderIdString || !buyerAddress) {
    console.log('Usage: node scripts/verify-allowance-onchain.js <orderIdString> <buyerAddress>');
    console.log('Example: node scripts/verify-allowance-onchain.js AP65ELTMI 0x...');
    process.exit(1);
  }

  console.log('\nüîç Ê∑±Â∫¶È™åËØÅÈìæ‰∏äÊéàÊùÉÁä∂ÊÄÅ\n');
  console.log('ËÆ¢ÂçïID:', orderIdString);
  console.log('‰π∞ÂÆ∂Âú∞ÂùÄ:', buyerAddress);
  console.log('');

  try {
    const gateway = await ethers.getContractAt(GATEWAY_ABI, PAYMENT_GATEWAY_V2);
    const usdc = await ethers.getContractAt(ERC20_ABI, MOCK_USDC);

    // 1. Ëé∑ÂèñËÆ¢ÂçïËØ¶ÊÉÖ
    console.log('üì¶ 1. ËÆ¢ÂçïËØ¶ÊÉÖ\n');
    const order = await gateway.getOrderDetailsByString(orderIdString);
    const orderAmount = ethers.formatUnits(order.orderAmount, 6);
    const orderAmountRaw = order.orderAmount;

    console.log('  ËÆ¢ÂçïÈáëÈ¢ù:', orderAmount, 'USDC');
    console.log('  ËÆ¢ÂçïÈáëÈ¢ù (raw):', orderAmountRaw.toString());
    console.log('  ÊîØ‰ªò‰ª£Â∏Å:', order.paymentToken);
    console.log('  ÂïÜÂÆ∂Âú∞ÂùÄ:', order.merchant);
    console.log('  ÊåáÂÆö‰π∞ÂÆ∂:', order.payer === ethers.ZeroAddress ? '(ÂÖ¨ÂºÄËÆ¢Âçï)' : order.payer);
    console.log('');

    // 2. Ê£ÄÊü•‰π∞ÂÆ∂‰ΩôÈ¢ù
    console.log('üí∞ 2. ‰π∞ÂÆ∂‰ΩôÈ¢ù\n');
    const balance = await usdc.balanceOf(buyerAddress);
    const balanceFormatted = ethers.formatUnits(balance, 6);
    console.log('  USDC ‰ΩôÈ¢ù:', balanceFormatted, 'USDC');
    console.log('  USDC ‰ΩôÈ¢ù (raw):', balance.toString());
    console.log('  ‰ΩôÈ¢ùÂÖÖË∂≥?', balance >= orderAmountRaw ? '‚úÖ ÊòØ' : '‚ùå Âê¶');
    console.log('');

    // 3. Ê£ÄÊü•Èìæ‰∏äÊéàÊùÉÔºà‰ΩøÁî®ÊúÄÊñ∞Âå∫ÂùóÔºâ
    console.log('üîê 3. Èìæ‰∏äÊéàÊùÉÊ£ÄÊü•\n');

    // Ê£ÄÊü•ÂØπ V2 ÁΩëÂÖ≥ÁöÑÊéàÊùÉ
    const allowanceV2 = await usdc.allowance(buyerAddress, PAYMENT_GATEWAY_V2);
    const allowanceV2Formatted = ethers.formatUnits(allowanceV2, 6);

    console.log('  ÂØπ V2 ÁΩëÂÖ≥ÁöÑÊéàÊùÉ:');
    console.log('    Âú∞ÂùÄ:', PAYMENT_GATEWAY_V2);
    console.log('    ÊéàÊùÉÈ¢ùÂ∫¶:', allowanceV2Formatted, 'USDC');
    console.log('    ÊéàÊùÉÈ¢ùÂ∫¶ (raw):', allowanceV2.toString());
    console.log('    ÊòØÂê¶ Max?', allowanceV2 === ethers.MaxUint256 ? '‚úÖ ÊòØ' : `‚ùå Âê¶`);
    console.log('    ÊéàÊùÉÂÖÖË∂≥?', allowanceV2 >= orderAmountRaw ? '‚úÖ ÊòØ' : '‚ùå Âê¶');
    console.log('');

    // 4. Ê®°Êãü processPayment Ë∞ÉÁî®Ôºà‰∏çÁúüÊ≠£ÊâßË°åÔºâ
    console.log('üß™ 4. Ê®°Êãü processPayment Ë∞ÉÁî®\n');

    try {
      // ‰ΩøÁî® callStatic Ê®°ÊãüË∞ÉÁî®Ôºà‰∏ç‰ºöÊîπÂèòÁä∂ÊÄÅÔºâ
      const signer = (await ethers.getSigners())[0];
      const gatewayWithSigner = gateway.connect(signer);

      // Ê≥®ÊÑèÔºöËøôÈáåÊàë‰ª¨Êó†Ê≥ïÂÆåÂÖ®Ê®°ÊãüÁî®Êà∑ÁöÑË∞ÉÁî®ÔºåÂõ†‰∏∫ msg.sender ‰ºöÊòØÊàë‰ª¨ÁöÑÊµãËØïË¥¶Êà∑
      // ‰ΩÜÊàë‰ª¨ÂèØ‰ª•Ê£ÄÊü•ÂêàÁ∫¶ÁöÑÂÖ∂‰ªñÁä∂ÊÄÅ

      console.log('  ‚ö†Ô∏è  Ê≥®ÊÑèÔºöÁî±‰∫é Hardhat ÈôêÂà∂ÔºåÊó†Ê≥ïÂÆåÂÖ®Ê®°ÊãüÁî®Êà∑Ë∞ÉÁî®');
      console.log('  ‰ΩÜÂèØ‰ª•Ê£ÄÊü•ÂÖ∂‰ªñÈìæ‰∏äÁä∂ÊÄÅ...');
      console.log('');

    } catch (error) {
      console.log('  Ê®°ÊãüË∞ÉÁî®Â§±Ë¥•:', error.message);
      console.log('');
    }

    // 5. ÁªºÂêàËØäÊñ≠
    console.log('üéØ 5. ÁªºÂêàËØäÊñ≠ÁªìÊûú\n');

    const hasBalance = balance >= orderAmountRaw;
    const hasAllowance = allowanceV2 >= orderAmountRaw;
    const isMaxAllowance = allowanceV2 === ethers.MaxUint256;

    console.log(`  [ ${hasBalance ? '‚úÖ' : '‚ùå'} ] ‰ΩôÈ¢ùÂÖÖË∂≥`);
    console.log(`  [ ${hasAllowance ? '‚úÖ' : '‚ùå'} ] ÊéàÊùÉÂÖÖË∂≥`);
    console.log(`  [ ${isMaxAllowance ? '‚úÖ' : '‚ö†Ô∏è ' } ] ÊéàÊùÉ‰∏∫ Max ÂÄº`);
    console.log('');

    // 6. ÈóÆÈ¢òÂàÜÊûê
    if (!hasBalance) {
      console.log('‚ùå ÈóÆÈ¢òÔºö‰ΩôÈ¢ù‰∏çË∂≥ÔºÅ');
      console.log('');
      console.log('   Ëß£ÂÜ≥ÊñπÊ°àÔºö');
      console.log('   ËøêË°åÈì∏Â∏ÅËÑöÊú¨: npx hardhat run scripts/mint-tokens.js --network op-sepolia');
      console.log('');
    } else if (!hasAllowance) {
      console.log('‚ùå ÈóÆÈ¢òÔºöÊéàÊùÉ‰∏çË∂≥ÔºÅ');
      console.log('');
      console.log('   ÂΩìÂâçÊéàÊùÉ:', allowanceV2Formatted, 'USDC');
      console.log('   ÈúÄË¶ÅÊéàÊùÉ:', orderAmount, 'USDC');
      console.log('   Â∑ÆÈ¢ù:', ethers.formatUnits(orderAmountRaw - allowanceV2, 6), 'USDC');
      console.log('');
      console.log('   Ëß£ÂÜ≥ÊñπÊ°àÔºö');
      console.log('   1. ËÆøÈóÆÊîØ‰ªòÈ°µÈù¢: http://localhost:3000/pay/' + orderIdString);
      console.log('   2. ËøûÊé•‰π∞ÂÆ∂Èí±ÂåÖ (' + buyerAddress + ')');
      console.log('   3. ÁÇπÂáª "Approve USDC" ÊåâÈíÆ');
      console.log('   4. Á°ÆËÆ§ MetaMask ‰∫§Êòì');
      console.log('   5. Á≠âÂæÖ‰∫§ÊòìÁ°ÆËÆ§ÔºàÁ∫¶ 30 ÁßíÔºâ');
      console.log('   6. Âà∑Êñ∞È°µÈù¢Âπ∂ÈáçËØï');
      console.log('');
    } else {
      console.log('‚úÖ ÊâÄÊúâÈìæ‰∏äÊ£ÄÊü•ÈÄöËøáÔºÅ');
      console.log('');
      console.log('   ‰ΩôÈ¢ùÂíåÊéàÊùÉÈÉΩÂÖÖË∂≥ÔºåÁêÜËÆ∫‰∏äÂèØ‰ª•ÊîØ‰ªò„ÄÇ');
      console.log('');
      console.log('   Â¶ÇÊûú‰ªçÁÑ∂Â§±Ë¥•ÔºåÂèØËÉΩÁöÑÂéüÂõ†Ôºö');
      console.log('   1. üîÑ RPC ÁºìÂ≠òÈóÆÈ¢ò - Á≠âÂæÖÂá†ÁßíÂêéÈáçËØï');
      console.log('   2. üåê ÁΩëÁªúÂª∂Ëøü - Â∞ùËØïÂàáÊç¢ RPC Á´ØÁÇπ');
      console.log('   3. üë§ Ë¥¶Êà∑‰∏çÂåπÈÖç - Á°ÆËÆ§ MetaMask ËøûÊé•ÁöÑÊòØÊ≠£Á°ÆË¥¶Êà∑');
      console.log('   4. üîí ËÆ¢ÂçïÊåáÂÆö‰π∞ÂÆ∂ - Á°ÆËÆ§‰Ω†ÁöÑÂú∞ÂùÄÊòØÂê¶ÊòØÊåáÂÆö‰π∞ÂÆ∂');
      console.log('');
      console.log('   ËØ∑Á°ÆËÆ§‰ª•‰∏ã‰ø°ÊÅØÔºö');
      console.log('   - MetaMask ÂΩìÂâçË¥¶Êà∑:', buyerAddress);
      console.log('   - ËÆ¢ÂçïÊåáÂÆö‰π∞ÂÆ∂:', order.payer === ethers.ZeroAddress ? '(‰ªª‰Ωï‰∫∫ÂèØÊîØ‰ªò)' : order.payer);

      if (order.payer !== ethers.ZeroAddress && order.payer.toLowerCase() !== buyerAddress.toLowerCase()) {
        console.log('');
        console.log('   ‚ö†Ô∏è  Ë≠¶ÂëäÔºöËÆ¢ÂçïÊúâÊåáÂÆö‰π∞ÂÆ∂Ôºå‰ΩÜ‰Ω†‰∏çÊòØÊåáÂÆö‰π∞ÂÆ∂ÔºÅ');
        console.log('   ËÆ¢ÂçïÊåáÂÆö‰π∞ÂÆ∂:', order.payer);
        console.log('   ‰Ω†ÁöÑÂú∞ÂùÄ:', buyerAddress);
        console.log('   Âè™ÊúâÊåáÂÆö‰π∞ÂÆ∂ÂèØ‰ª•ÊîØ‰ªòÊ≠§ËÆ¢Âçï„ÄÇ');
      }
      console.log('');
    }

    // 7. È¢ùÂ§ñÊ£ÄÊü•ÔºöÈ™åËØÅ‰ª£Â∏ÅÂêàÁ∫¶Âú∞ÂùÄ
    console.log('üîç 6. ‰ª£Â∏ÅÂêàÁ∫¶È™åËØÅ\n');
    console.log('  ÊîØ‰ªò‰ª£Â∏Å (ËÆ¢Âçï):', order.paymentToken);
    console.log('  USDC Âú∞ÂùÄ (Â∏∏Èáè):', MOCK_USDC);
    console.log('  Âú∞ÂùÄ‰∏ÄËá¥?', order.paymentToken.toLowerCase() === MOCK_USDC.toLowerCase() ? '‚úÖ ÊòØ' : '‚ùå Âê¶');

    if (order.paymentToken.toLowerCase() !== MOCK_USDC.toLowerCase()) {
      console.log('');
      console.log('  ‚ùå Ë≠¶ÂëäÔºöËÆ¢ÂçïÁöÑÊîØ‰ªò‰ª£Â∏Å‰∏é USDC ‰∏ç‰∏ÄËá¥ÔºÅ');
      console.log('  ‰Ω†ÂèØËÉΩÈúÄË¶ÅÊéàÊùÉÂÖ∂‰ªñ‰ª£Â∏Å:', order.paymentToken);
    }
    console.log('');

  } catch (error) {
    console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error.message);

    if (error.message.includes('Order not found')) {
      console.log('');
      console.log('ËÆ¢Âçï‰∏çÂ≠òÂú®ÔºÅÂèØËÉΩÁöÑÂéüÂõ†Ôºö');
      console.log('1. ËÆ¢ÂçïIDÈîôËØØ');
      console.log('2. ËÆ¢ÂçïÊú™Âú® V2 ÁΩëÂÖ≥ÂàõÂª∫');
      console.log('3. ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò');
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
